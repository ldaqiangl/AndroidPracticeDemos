apply plugin: 'com.android.application'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.3"
    //忽略方法数限制的检查
    dexOptions {
        jumboMode = true
    }
    //签名配置
    signingConfigs {
        release {
            try {
                storeFile file("./keystore/Test.jks")
                storePassword "000000"
                keyAlias "Test"
                keyPassword "000000"
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }
        //debug {
        //    storeFile file(".keystore/debug.keystore")
        //}
    }
    //默认配置
    defaultConfig {
        applicationId "com.dysania.appupgradedemo"
        minSdkVersion 14
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"

        //开启multiDex
        multiDexEnabled true
        //以Proguard的方式手动加入要放到Main.dex中的类
        multiDexKeepProguard file("keep_in_main_dex.txt")

        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi', 'x86' //, 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }
    //构建类型
    buildTypes {
        release {
            minifyEnabled true
            //是否zip对齐
            zipAlignEnabled true
            //移除无用资源
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    repositories {
        flatDir {
            dirs 'libs'
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    productFlavors {
        yingyongbao {}
        wandoujia {}
        xiaomi {}
    }
    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [CHANNEL: name]
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:24.2.1'
    testCompile 'junit:junit:4.12'
    //多dex配置
    compile "com.android.support:multidex:1.0.1"
    //Bugly升级（建议指定一个固定的版本号）
    //compile 'com.tencent.bugly:crashreport_upgrade:latest.release'
    compile 'com.tencent.bugly:crashreport_upgrade:1.2.0'
}

def gitSha() {
    try {
        String gitRev = 'git rev-parse --short HEAD'.execute(null, project.rootDir).text.trim()
        if (gitRev == null) {
            throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
        }
        return gitRev
    } catch (Exception e) {
        throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
    }
}

def bakPath = file("${buildDir}/bakApk/")

/**
 * you can use assembleRelease to build you base apk
 * use tinkerPatchRelease -POLD_APK=  -PAPPLY_MAPPING=  -PAPPLY_RESOURCE= to build patch
 * add apk from the build/bakApk
 */
ext {
    //for some reason, you may want to ignore tinkerBuild, such as instant run debug build?
    tinkerEnabled = true

    //for normal build
    //old apk file to build patch apk
    tinkerOldApkPath = "${bakPath}/app-1202-10-55-35/wandoujia/app-wandoujia-release.apk"
    //proguard mapping file to build patch apk
    tinkerApplyMappingPath = "${bakPath}/app-1202-10-55-35/wandoujia/app-wandoujia-mapping.txt"
    //resource R.txt to build patch apk, must input if there is resource changed
    tinkerApplyResourcePath = "${bakPath}/app-1202-10-55-35/wandoujia/app-wandoujia-release-R.txt"

    //only use for build all flavor, if not, just ignore this field
    tinkerBuildFlavorDirectory = "${bakPath}/app-1202-10-55-35"
}

def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? TINKER_ENABLE : ext.tinkerEnabled
}

def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory
}

if (buildWithTinker()) {
    apply plugin: 'com.tencent.bugly.tinker-support'
    //依赖tinker插件
    apply plugin: 'com.tencent.tinker.patch'

    tinkerSupport {}

    //全局信息相关配置项
    tinkerPatch {
        oldApk = getOldApkPath()        //打补丁包时必选，基准包路径
        ignoreWarning = false           //可选，默认false
        useSign = true                  //可选，默认true，验证基准apk和patch签名是否一致

        //编译相关配置项
        buildConfig {
            applyMapping = getApplyMappingPath()
            //可选，设置mapping文件，建议保持旧的apk的proguard混淆方式
            applyResourceMapping = getApplyResourceMappingPath()
            //可选，设置R.txt文件，通过旧apk文件保持ResId的分配
            tinkerId = "02b8c4faf567ecd586f71f740b20ba11b19d63ae"
            //必选，当前版本的唯一标识，可以是git版本号、versionName，默认为null
        }

        //dex相关配置项
        dex {
            dexMode = "jar"                             //可选，默认为jar
            usePreGeneratedPatchDex = true              //可选，默认为false
            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]
            loader = ["com.tencent.tinker.loader.*",    //必选
                      "com.dysania.appupgradedemo.MyApplication",
            ]
        }

        //lib相关的配置项
        lib {
            pattern = ["lib/armeabi.so"]
        }

        //res相关的配置项
        res {
            pattern = ["res", "assets", "resources.arsc", "AndroidManifest.xml"]
            ignoreChange = ["assets/sample_meta.txt"]
            largeModSize = 100
        }

        //用于生成补丁包中的 'package_meta.txt' 文件
        packageConfig {
            configField("patchMessage", "tinker is sample to use")
            configField("platform", "all")
            configField("patchVersion", "1.0")
        }

        //7zip路径配置项，执行前提是useSign为true
        sevenZip {
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10" // optional
        }
    }
}

List<String> flavors = new ArrayList<>();
project.android.productFlavors.each { flavor ->
    flavors.add(flavor.name)
}
boolean hasFlavors = flavors.size() > 0
/**
 * bak apk and mapping
 */
android.applicationVariants.all { variant ->
    /**
     * task type, you want to bak
     */
    def taskName = variant.name
    def date = new Date().format("MMdd-HH-mm-ss")

    tasks.all {
        if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

            it.doLast {
                copy {
                    def fileNamePrefix = "${project.name}-${variant.baseName}"
                    def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                    def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                    from variant.outputs.outputFile
                    into destPath
                    rename { String fileName ->
                        fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                    }

                    from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                    into destPath
                    rename { String fileName ->
                        fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                    }

                    from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                    into destPath
                    rename { String fileName ->
                        fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                    }
                }
            }
        }
    }
}

project.afterEvaluate {
    //sample use for build all flavor for one time
    if (hasFlavors) {
        task(tinkerPatchAllFlavorRelease) {
            group = 'tinker'
            def originOldPath = getTinkerBuildFlavorDirectory()
            for (String flavor : flavors) {
                def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                dependsOn tinkerTask
                def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                preAssembleTask.doFirst {
                    String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                    project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
                    project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
                    project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"

                }

            }
        }

        task(tinkerPatchAllFlavorDebug) {
            group = 'tinker'
            def originOldPath = getTinkerBuildFlavorDirectory()
            for (String flavor : flavors) {
                def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                dependsOn tinkerTask
                def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                preAssembleTask.doFirst {
                    String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                    project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
                    project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
                    project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
                }

            }
        }
    }
}

//tinkerSupport {
//    //开启tinker-support插件，默认值为true
//    enable = true;
//    //是否编译完成后归档apk到指定目录，默认值为false
//    autoBackupApk = false;
//    //指定归档目录，默认值当前module的子目录tinker
//    //backupApkDir = 'tinker'
//
//    //是否启用覆盖tinkerPatch配置功能，默认值为false   注：开启后tinkerPatch配置失效，即无需再配置tinkerPatch
//    overrideTinkerPatchConfiguration = true
//
//    //编译补丁包时，必需指定基线版本的apk，默认值为空
//    //如果为空，则表示不是进行补丁包的编译
//    baseApk = getOldApkPath()                                   //"YOUR_OLD_APK"
//
//    //对应tinker插件applyMapping
//    baseApkProguardMapping = getApplyMappingPath()
//    //"YOUR_OLD_APK_PROGUARD_FILE"
//
//    //对应tinker插件applyResourceMapping
//    baseApkResourceMapping = getApplyResourceMappingPath()      //"YOUR_OLD_APK_RES_MAPPING"
//
//    //当前版本的唯一标识
//    tinkerId = "Tinker_1.0"                                     //"YOUR_TINKER_ID"
//}